{"version":3,"sources":["features/Orderbook/orderbook.module.scss","features/Table/table.module.scss","features/Table/chart.module.scss","features/Table/row.js","features/Table/table.js","features/Table/chart.jsx","features/utils.js","features/Orderbook/orderSlice.js","features/Orderbook/orderbook.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","row","price","count","amount","total","Fragment","TableRow","memo","propTypes","PropTypes","number","Table","data","className","styles","table","Array","isArray","length","slice","map","ele","i","Diagram","fill","transformX","transformY","style","transform","chart","x","y","width","height","fillOpacity","Chart","array","string","calculateTotal","list","totalList","reduce","acc","Math","abs","parseFloat","toFixed","obj","push","orderSlice","createSlice","name","initialState","tableData","reducers","setTableData","state","action","buyObj","sellObj","buy","Object","values","reverse","sell","createTableData","payload","updateTableData","value","cloneBuyObj","cloneSellObj","udpateTable","actions","selectTable","order","Orderbook","useSelector","dispatch","useDispatch","useEffect","subscribeMessage","JSON","stringify","event","channel","symbol","len","webSocket","WebSocket","onopen","send","onmessage","evt","parse","setTableAction","setTimeout","updateTableAction","OPEN","CONNECTING","close","wrapper","App","configureStore","reducer","orderReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e52e6e91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"orderbook_wrapper__2NA3T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__31tYB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"chart_chart__2q3rL\"};","import React, { memo } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst row = ({ price, count, amount, total }) => {\r\n  return (\r\n    <React.Fragment>\r\n        <tr>\r\n            <td>{count}</td>\r\n            <td>{amount}</td>\r\n            <td>{total}</td>\r\n            <td>{price}</td>\r\n        </tr>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport const TableRow = memo(row)\r\n\r\nTableRow.propTypes = {\r\n  price: PropTypes.number,\r\n  count: PropTypes.number,\r\n  amount: PropTypes.number,\r\n  total: PropTypes.number\r\n}\r\n/*\r\ndata: PropTypes.object(PropTypes.shape({\r\n\r\n  })) */\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { TableRow } from './row'\r\n\r\nimport styles from './table.module.scss'\r\n\r\nexport const Table = ({ data = [] }) => {\r\n  return (\r\n    <table className={styles.table}>\r\n         <thead>\r\n            <tr>\r\n                <th>Count</th>\r\n                <th>Amount</th>\r\n                <th>Total</th>\r\n                <th>Price</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>{\r\n             Array.isArray(data) && data.length\r\n               ? data.slice(0, 25).map(\r\n                   (ele, i) => (\r\n                        <TableRow\r\n                          key={i}\r\n                          price={ele.price}\r\n                          count={ele.count}\r\n                          amount={ele.amount}\r\n                          total={ele.total}\r\n                        />\r\n                   )\r\n                 )\r\n               : null\r\n        }</tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.array\r\n}\r\n","import React, { memo } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport styles from './chart.module.scss'\r\n\r\nconst Diagram = ({ data = [], fill = 'green', transformX = -1, transformY = 1 }) => {\r\n  const style = {\r\n    fill,\r\n    transform: `scale(${transformX},${transformY})`\r\n  }\r\n  return (\r\n    <svg className={styles.chart} style={style}>\r\n        {\r\n            Array.isArray(data) && data.length && data.slice(0, 25).map(\r\n              (ele, i) => (\r\n                <rect x=\"1\" y={i * 17} width={`${ele.total}%`} height=\"17\" fillOpacity=\"0.2\" key={i}></rect>\r\n              )\r\n            )\r\n        }\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport const Chart = memo(Diagram)\r\n\r\nChart.propTypes = {\r\n  data: PropTypes.array,\r\n  fill: PropTypes.string,\r\n  transformX: PropTypes.string,\r\n  transformY: PropTypes.string\r\n}\r\n","const calculateTotal = (list) => {\r\n  const totalList = []\r\n  list.reduce((acc, ele) => {\r\n    const { price, count, amount } = ele\r\n    const total = Math.abs(parseFloat(acc.amount) + parseFloat(amount)).toFixed(3)\r\n    const obj = {\r\n      price,\r\n      count,\r\n      amount,\r\n      total\r\n    }\r\n    if (acc.price) {\r\n      totalList.push({ ...acc, total: acc.amount })\r\n    }\r\n    totalList.push(obj)\r\n    return {\r\n      amount: total\r\n    }\r\n  })\r\n  return totalList\r\n}\r\n\r\nexport const createTableData = (data) => {\r\n  const buyObj = {}\r\n  const sellObj = {}\r\n  data.map((ele) => {\r\n    const obj = {\r\n      price: ele[0],\r\n      count: ele[1],\r\n      amount: Math.abs(ele[2]).toFixed(3)\r\n    }\r\n    ele[2] > 0 ? buyObj[obj.price] = obj : sellObj[obj.price] = obj\r\n    return obj\r\n  })\r\n\r\n  const buySorted = calculateTotal(Object.values(buyObj).reverse().slice(0, 25))\r\n  const sellSorted = calculateTotal(Object.values(sellObj).reverse().slice(0, 25))\r\n  const split = {\r\n    buy: buySorted,\r\n    sell: sellSorted,\r\n    buyObj,\r\n    sellObj\r\n  }\r\n  return split\r\n}\r\n\r\nexport const udpateTable = (value, { buyObj, sellObj }) => {\r\n  /*\r\n     [35,[18276,7,2.29340223]]\r\n     [35,[18314,3,-1.01157617]]\r\n     */\r\n  const cloneBuyObj = {\r\n    ...buyObj\r\n  }\r\n  const cloneSellObj = {\r\n    ...sellObj\r\n  }\r\n  const obj = {\r\n    price: value[0],\r\n    count: value[1],\r\n    amount: Math.abs(value[2]).toFixed(3)\r\n  }\r\n  value[2] > 0 ? cloneBuyObj[obj.price] = obj : cloneSellObj[obj.price] = obj\r\n\r\n  const buySorted = calculateTotal(Object.values(cloneBuyObj).reverse().slice(0, 25))\r\n  const sellSorted = calculateTotal(Object.values(cloneSellObj).reverse().slice(0, 25))\r\n  const result = {\r\n    buy: buySorted,\r\n    sell: sellSorted,\r\n    buyObj: cloneBuyObj,\r\n    sellObj: cloneSellObj\r\n  }\r\n  return result\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\nimport { createTableData, udpateTable } from '../utils'\n\nexport const orderSlice = createSlice({\n  name: 'order',\n  initialState: {\n    tableData: []\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = createTableData(action.payload)\n    },\n    updateTableData: (state, action) => {\n      state.tableData = udpateTable(action.payload, state.tableData)\n    }\n  }\n})\n\nexport const {\n  setTableData,\n  updateTableData\n} = orderSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const setTableAction = data => dispatch => {\n  dispatch(setTableData(data))\n}\n\nexport const updateTableAction = data => dispatch => {\n  setTimeout(() => {\n    dispatch(updateTableData(data))\n  }, 500)\n}\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectTable = state => state.order.tableData\n\nexport default orderSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Table } from '../Table/table'\nimport { Chart } from '../Table/chart'\n\nimport styles from './orderbook.module.scss'\n\nimport {\n  setTableAction,\n  updateTableAction,\n  selectTable\n} from './orderSlice'\n\nexport function Orderbook () {\n  const tableData = useSelector(selectTable)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const subscribeMessage = JSON.stringify({\n      event: 'subscribe',\n      channel: 'book',\n      symbol: 'tBTCUSD',\n      len: 25\n    })\n\n    const webSocket = new WebSocket('wss://api-pub.bitfinex.com/ws/2')\n\n    webSocket.onopen = () => webSocket.send(subscribeMessage)\n\n    webSocket.onmessage = evt => {\n      const data = JSON.parse(evt.data)\n      if (Array.isArray(data) && data[1].length > 3) {\n        dispatch(setTableAction(data[1]))\n      } else if (Array.isArray(data) && data[1].length === 3) {\n        dispatch(updateTableAction(data[1]))\n      }\n    }\n\n    return () => {\n      if (webSocket.OPEN && !webSocket.CONNECTING) {\n        webSocket.close()\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      <span className={styles.wrapper}>\n        <span>Buy</span>\n        <Table data={tableData.buy}/>\n        <Chart data={tableData.buy}/>\n      </span>\n      <span className={styles.wrapper}>\n        <span>Sell</span>\n        <Table data={tableData.sell}/>\n        <Chart data={tableData.sell} fill=\"red\" transformX=\"1\" transformY =\"1\" />\n      </span>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Orderbook } from './features/Orderbook/orderbook'\nimport './App.scss'\n\nfunction App () {\n  return (\n    <div className=\"App App-header\">\n        <div>Orderbook</div>\n        <Orderbook />\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\nimport orderReducer from '../features/Orderbook/orderSlice'\n\nexport default configureStore({\n  reducer: {\n    order: orderReducer\n  }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}